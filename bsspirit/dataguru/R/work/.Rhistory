m
lm<-matrix(rep(0,9),nrow=n)
lm
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
lm
um<-t(lm)
um
num<-which(upper.tri(m))
num
node<-num[which(m[num] == um[num])]
node
col<-ceiling(node/n)
row<-node %% n
col
row
result<-rep(0,n)
result
result[col]=1
result[row]=1
result
m<-matrix(c(0,1,1,1,0,1,0,0,0),byrow=TRUE,nrow=n)
m
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=n)
m
n=3
result<-rep(0,n)
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=n)
lm<-matrix(rep(0,9),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num])]
col<-ceiling(node/n)
row<-node %% n
result[col]=1
result[row]=1
result
m<-matrix(c(0,1,1,1,0,1,0,0,0),byrow=TRUE,nrow=n)
fn(m)
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,9),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num])]
col<-ceiling(node/n)
row<-node %% n
result[col]=1
result[row]=1
result
}
fn(m)
m
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,9),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num])]
col<-ceiling(node/n)
row<-node %% n
result[col]=1
result[row]=1
result
}
m<-matrix(c(0,1,1,1,0,1,0,0,0),byrow=TRUE,nrow=n)
fn(m)
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=n)
fn(m)
m<-matrix(c(0,1,1,1,0,1,0,0,0),byrow=TRUE,nrow=n);m
fn(m)
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=n);m
fn(m)
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,9),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num])]
col<-ceiling(node/n)
row<-node %% n
result[col]=result[col]+1
result[row]=result[row]+1
result
}
m<-matrix(c(1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0),byrow=TRUE,nrow=4);m
fn(m)
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,n^2),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num])]
col<-ceiling(node/n)
row<-node %% n
result[col]=result[col]+1
result[row]=result[row]+1
result
}
m<-matrix(c(1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0),byrow=TRUE,nrow=4);m
fn(m)
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=3);m
fn(m)
n=nrow(m)
n
n=4
m<-matrix(c(1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0),byrow=TRUE,nrow=4);m
m
n=nrow(m)
n
result<-rep(0,n)
result
lm<-matrix(rep(0,n^2),nrow=n)
lm
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
lm
um<-t(lm)
um
num<-which(upper.tri(m))
num
node<-num[which(m[num] == um[num])]
node
m[num]
um[num]
node<-num[which(m[num] == um[num] == 1)]
um[num]
node<-num[which(m[num] == um[num] &  um[num] == 1)]
nod
node
col<-ceiling(node/n)
col
row<-node %% n
row
result[col]=result[col]+1
result[row]=result[row]+1
result
result[row]
result
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,n^2),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num] &  um[num] == 1)]
col<-ceiling(node/n)
row<-node %% n
result[col]=result[col]+1
result[row]=result[row]+1
result
}
m<-matrix(c(1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0),byrow=TRUE,nrow=4);m
fn(m)
col<-ceiling(node/n)
row<-node %% n
result<-rep(0,n)
for(in in 1:lenght(col)){
result[col]=result[col[i]]+1
}
1:lenght(col)
for(in in 1:length(col)){
result[col]=result[col[i]]+1
}
length(col)
for(in in 1:length(col)){
result[col]=result[col[i]]+1
}
i=1
col[1]
result[col[i]]
result[col[i]]+1
for(in in 1:length(col)){
result[col[i]]=result[col[i]]+1
}
for(in in 1:length(col)){
result[col[i]]<-result[col[i]]+1
}
for(i in 1:length(col)){
result[col[i]]<-result[col[i]]+1
}
result
for(i in 1:length(row)){
result[row[i]]=result[row[i]]+1
}
result
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,n^2),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num] &  um[num] == 1)]
col<-ceiling(node/n)
row<-node %% n
for(i in 1:length(col)) result[col[i]]<-result[col[i]]+1
for(i in 1:length(row)) result[row[i]]=result[row[i]]+1
result
}
m<-matrix(c(1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0),byrow=TRUE,nrow=4);m
fn(m)
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=3);m
fn(m)
fn<-function(m){
n=nrow(m)
result<-rep(0,n)
lm<-matrix(rep(0,n^2),nrow=n)
lm[which(lower.tri(m))]<-m[which(lower.tri(m))]
um<-t(lm)
num<-which(upper.tri(m))
node<-num[which(m[num] == um[num] &  um[num] == 1)]
col<-ceiling(node/n)
row<-node %% n
for(i in 1:length(col)) result[col[i]]<-result[col[i]]+1
for(i in 1:length(row)) result[row[i]]=result[row[i]]+1
result
}
m<-matrix(c(0,1,1,1,0,1,0,0,0),byrow=TRUE,nrow=3);m
fn(m)
m<-matrix(c(0,1,1,1,0,1,1,0,0),byrow=TRUE,nrow=3);m
fn(m)
m<-matrix(c(1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0),byrow=TRUE,nrow=4);m
fn(m)
rm(list=ls())
FileDataModel<-function(file){
data<-read.csv(file,header=FALSE)
names(data)<-c("uid","iid","pref")
user <- unique(data$uid)
item <- unique(sort(data$iid))
uidx <- match(data$uid, user)
iidx <- match(data$iid, item)
M <- matrix(0, length(user), length(item))
i <- cbind(uidx, iidx, pref=data$pref)
for(n in 1:nrow(i)){
M[i[n,][1],i[n,][2]]<-i[n,][3]
}
M
}
FILE<-"testCF.csv"
NEIGHBORHOOD_NUM<-2
RECOMMENDER_NUM<-3
M<-FileDataModel(FILE)
M
S<-EuclideanDistanceSimilarity(M)
EuclideanDistanceSimilarity<-function(M){
row<-nrow(M)
s<-matrix(0, row, row)
for(z1 in 1:row){
for(z2 in 1:row){
if(z1<z2){
num<-intersect(which(M[z1,]!=0),which(M[z2,]!=0)) #可计算的列
sum<-0
for(z3 in num){
sum<-sum+(M[z1,][z3]-M[z2,][z3])^2
}
s[z2,z1]<-length(num)/(1+sqrt(sum))
if(s[z2,z1]>1) s[z2,z1]<-1 #标准化
if(s[z2,z1]< -1) s[z2,z1]<- -1 #标准化
#print(paste(z1,z2));print(num);print(sum)
}
}
}
#补全三角矩阵
ts<-t(s)
w<-which(upper.tri(ts))
s[w]<-ts[w]
s
}
NearestNUserNeighborhood<-function(S,n){
row<-nrow(S)
neighbor<-matrix(0, row, n)
for(z1 in 1:row){
for(z2 in 1:n){
m<-which.max(S[,z1])
#       print(paste(z1,z2,m,'\n'))
neighbor[z1,][z2]<-m
S[,z1][m]=0
}
}
neighbor
}
UserBasedRecommender<-function(uid,n,M,S,N,item){
row<-ncol(N)
col<-ncol(M)
r<-matrix(0, row, col)
N1<-N[uid,]
for(z1 in 1:length(N1)){
num<-intersect(which(M[uid,]==0),which(M[N1[z1],]!=0)) #可计算的列
#     print(num)
for(z2 in num){
#       print(paste("for:",z1,N1[z1],z2,M[N1[z1],z2],S[uid,N1[z1]]))
r[z1,z2]=M[N1[z1],z2]*S[uid,N1[z1]]
}
}
sum<-colSums(r)
s2<-matrix(0, 2, col)
for(z1 in 1:length(N1)){
num<-intersect(which(colSums(r)!=0),which(M[N1[z1],]!=0))
for(z2 in num){
s2[1,][z2]<-s2[1,][z2]+S[uid,N1[z1]]
s2[2,][z2]<-s2[2,][z2]+1
}
}
s2[,which(s2[2,]==1)]=10000
s2<-s2[-2,]
r2<-matrix(0, n, 2)
rr<-sum/s2
for(z1 in 1:n){
w<-which.max(rr)
if(rr[w]>0.5){
r2[z1,1]<-item[which.max(rr)]
r2[z1,2]<-rr[w]
rr[w]=0
}
}
r2
}
S<-EuclideanDistanceSimilarity(M)
S
N<-NearestNUserNeighborhood(S,2)
N
R1<-UserBasedRecommender(1,3,M,S,N,item)
M
names
?names
dimnames(M)[[2]]
data<-read.csv(FILE,header=FALSE)
data
item <- unique(sort(data$iid))
item
names(data)<-c("uid","iid","pref")
item <- unique(sort(data$iid))
item
dimnames(M)[[2]]<-item
M
FileDataModel<-function(file){
data<-read.csv(file,header=FALSE)
names(data)<-c("uid","iid","pref")
user <- unique(data$uid)
item <- unique(sort(data$iid))
uidx <- match(data$uid, user)
iidx <- match(data$iid, item)
M <- matrix(0, length(user), length(item))
i <- cbind(uidx, iidx, pref=data$pref)
for(n in 1:nrow(i)){
M[i[n,][1],i[n,][2]]<-i[n,][3]
}
dimnames(M)[[2]]<-item
M
}
M<-FileDataModel(FILE)
M
S<-EuclideanDistanceSimilarity(M)
S
N<-NearestNUserNeighborhood(S,2)
N
M
dimnames(M)[[2]]
UserBasedRecommender<-function(uid,n,M,S,N){
row<-ncol(N)
col<-ncol(M)
r<-matrix(0, row, col)
N1<-N[uid,]
for(z1 in 1:length(N1)){
num<-intersect(which(M[uid,]==0),which(M[N1[z1],]!=0)) #可计算的列
#     print(num)
for(z2 in num){
#       print(paste("for:",z1,N1[z1],z2,M[N1[z1],z2],S[uid,N1[z1]]))
r[z1,z2]=M[N1[z1],z2]*S[uid,N1[z1]]
}
}
sum<-colSums(r)
s2<-matrix(0, 2, col)
for(z1 in 1:length(N1)){
num<-intersect(which(colSums(r)!=0),which(M[N1[z1],]!=0))
for(z2 in num){
s2[1,][z2]<-s2[1,][z2]+S[uid,N1[z1]]
s2[2,][z2]<-s2[2,][z2]+1
}
}
s2[,which(s2[2,]==1)]=10000
s2<-s2[-2,]
r2<-matrix(0, n, 2)
rr<-sum/s2
item <-dimnames(M)[[2]]
for(z1 in 1:n){
w<-which.max(rr)
if(rr[w]>0.5){
r2[z1,1]<-item[which.max(rr)]
r2[z1,2]<-rr[w]
rr[w]=0
}
}
r2
}
R1<-UserBasedRecommender(1,3,M,S,N)
R1
UserBasedRecommender(2,3,M,S,N)
dimnames(M)[[2]]
UserBasedRecommender<-function(uid,n,M,S,N){
row<-ncol(N)
col<-ncol(M)
r<-matrix(0, row, col)
N1<-N[uid,]
for(z1 in 1:length(N1)){
num<-intersect(which(M[uid,]==0),which(M[N1[z1],]!=0)) #可计算的列
#     print(num)
for(z2 in num){
#       print(paste("for:",z1,N1[z1],z2,M[N1[z1],z2],S[uid,N1[z1]]))
r[z1,z2]=M[N1[z1],z2]*S[uid,N1[z1]]
}
}
sum<-colSums(r)
s2<-matrix(0, 2, col)
for(z1 in 1:length(N1)){
num<-intersect(which(colSums(r)!=0),which(M[N1[z1],]!=0))
for(z2 in num){
s2[1,][z2]<-s2[1,][z2]+S[uid,N1[z1]]
s2[2,][z2]<-s2[2,][z2]+1
}
}
s2[,which(s2[2,]==1)]=10000
s2<-s2[-2,]
r2<-matrix(0, n, 2)
rr<-sum/s2
item <-dimnames(M)[[2]]
for(z1 in 1:n){
w<-which.max(rr)
if(rr[w]>0.5){
r2[z1,1]<-item[which.max(rr)]
r2[z1,2]<-as.double(rr[w])
rr[w]=0
}
}
r2
}
UserBasedRecommender(1,3,M,S,N)
data
M
S
N
R
r2
R1
n=3
row<-ncol(N)
col<-ncol(M)
r<-matrix(0, row, col)
N1<-N[uid,]
for(z1 in 1:length(N1)){
num<-intersect(which(M[uid,]==0),which(M[N1[z1],]!=0)) #可计算的列
#     print(num)
for(z2 in num){
#       print(paste("for:",z1,N1[z1],z2,M[N1[z1],z2],S[uid,N1[z1]]))
r[z1,z2]=M[N1[z1],z2]*S[uid,N1[z1]]
}
}
sum<-colSums(r)
s2<-matrix(0, 2, col)
for(z1 in 1:length(N1)){
num<-intersect(which(colSums(r)!=0),which(M[N1[z1],]!=0))
for(z2 in num){
s2[1,][z2]<-s2[1,][z2]+S[uid,N1[z1]]
s2[2,][z2]<-s2[2,][z2]+1
}
}
s2[,which(s2[2,]==1)]=10000
s2<-s2[-2,]
r2<-matrix(0, n, 2)
rr<-sum/s2
item <-dimnames(M)[[2]]
for(z1 in 1:n){
w<-which.max(rr)
if(rr[w]>0.5){
r2[z1,1]<-item[which.max(rr)]
r2[z1,2]<-as.double(rr[w])
rr[w]=0
}
}
r2
rr
r2
s2
w
row<-ncol(N)
col<-ncol(M)
r<-matrix(0, row, col)
r
uid=1
N1<-N[uid,]
for(z1 in 1:length(N1)){
num<-intersect(which(M[uid,]==0),which(M[N1[z1],]!=0)) #可计算的列
#     print(num)
for(z2 in num){
#       print(paste("for:",z1,N1[z1],z2,M[N1[z1],z2],S[uid,N1[z1]]))
r[z1,z2]=M[N1[z1],z2]*S[uid,N1[z1]]
}
}
N1
r
R1
read.table
?read.table
